// Code generated by counterfeiter. DO NOT EDIT.
package v3fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v3action"
	"code.cloudfoundry.org/cli/api/cloudcontroller/ccv3"
	"code.cloudfoundry.org/cli/command/v3"
)

type FakeV3ScaleActor struct {
	GetProcessByApplicationNameAndSpaceStub        func(appName string, spaceGUID string) (v3action.Process, v3action.Warnings, error)
	getProcessByApplicationNameAndSpaceMutex       sync.RWMutex
	getProcessByApplicationNameAndSpaceArgsForCall []struct {
		appName   string
		spaceGUID string
	}
	getProcessByApplicationNameAndSpaceReturns struct {
		result1 v3action.Process
		result2 v3action.Warnings
		result3 error
	}
	getProcessByApplicationNameAndSpaceReturnsOnCall map[int]struct {
		result1 v3action.Process
		result2 v3action.Warnings
		result3 error
	}
	ScaleProcessByApplicationNameAndSpaceStub        func(appName string, spaceGUID string, process ccv3.Process) (v3action.Warnings, error)
	scaleProcessByApplicationNameAndSpaceMutex       sync.RWMutex
	scaleProcessByApplicationNameAndSpaceArgsForCall []struct {
		appName   string
		spaceGUID string
		process   ccv3.Process
	}
	scaleProcessByApplicationNameAndSpaceReturns struct {
		result1 v3action.Warnings
		result2 error
	}
	scaleProcessByApplicationNameAndSpaceReturnsOnCall map[int]struct {
		result1 v3action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeV3ScaleActor) GetProcessByApplicationNameAndSpace(appName string, spaceGUID string) (v3action.Process, v3action.Warnings, error) {
	fake.getProcessByApplicationNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.getProcessByApplicationNameAndSpaceReturnsOnCall[len(fake.getProcessByApplicationNameAndSpaceArgsForCall)]
	fake.getProcessByApplicationNameAndSpaceArgsForCall = append(fake.getProcessByApplicationNameAndSpaceArgsForCall, struct {
		appName   string
		spaceGUID string
	}{appName, spaceGUID})
	fake.recordInvocation("GetProcessByApplicationNameAndSpace", []interface{}{appName, spaceGUID})
	fake.getProcessByApplicationNameAndSpaceMutex.Unlock()
	if fake.GetProcessByApplicationNameAndSpaceStub != nil {
		return fake.GetProcessByApplicationNameAndSpaceStub(appName, spaceGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.getProcessByApplicationNameAndSpaceReturns.result1, fake.getProcessByApplicationNameAndSpaceReturns.result2, fake.getProcessByApplicationNameAndSpaceReturns.result3
}

func (fake *FakeV3ScaleActor) GetProcessByApplicationNameAndSpaceCallCount() int {
	fake.getProcessByApplicationNameAndSpaceMutex.RLock()
	defer fake.getProcessByApplicationNameAndSpaceMutex.RUnlock()
	return len(fake.getProcessByApplicationNameAndSpaceArgsForCall)
}

func (fake *FakeV3ScaleActor) GetProcessByApplicationNameAndSpaceArgsForCall(i int) (string, string) {
	fake.getProcessByApplicationNameAndSpaceMutex.RLock()
	defer fake.getProcessByApplicationNameAndSpaceMutex.RUnlock()
	return fake.getProcessByApplicationNameAndSpaceArgsForCall[i].appName, fake.getProcessByApplicationNameAndSpaceArgsForCall[i].spaceGUID
}

func (fake *FakeV3ScaleActor) GetProcessByApplicationNameAndSpaceReturns(result1 v3action.Process, result2 v3action.Warnings, result3 error) {
	fake.GetProcessByApplicationNameAndSpaceStub = nil
	fake.getProcessByApplicationNameAndSpaceReturns = struct {
		result1 v3action.Process
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3ScaleActor) GetProcessByApplicationNameAndSpaceReturnsOnCall(i int, result1 v3action.Process, result2 v3action.Warnings, result3 error) {
	fake.GetProcessByApplicationNameAndSpaceStub = nil
	if fake.getProcessByApplicationNameAndSpaceReturnsOnCall == nil {
		fake.getProcessByApplicationNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v3action.Process
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.getProcessByApplicationNameAndSpaceReturnsOnCall[i] = struct {
		result1 v3action.Process
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3ScaleActor) ScaleProcessByApplicationNameAndSpace(appName string, spaceGUID string, process ccv3.Process) (v3action.Warnings, error) {
	fake.scaleProcessByApplicationNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.scaleProcessByApplicationNameAndSpaceReturnsOnCall[len(fake.scaleProcessByApplicationNameAndSpaceArgsForCall)]
	fake.scaleProcessByApplicationNameAndSpaceArgsForCall = append(fake.scaleProcessByApplicationNameAndSpaceArgsForCall, struct {
		appName   string
		spaceGUID string
		process   ccv3.Process
	}{appName, spaceGUID, process})
	fake.recordInvocation("ScaleProcessByApplicationNameAndSpace", []interface{}{appName, spaceGUID, process})
	fake.scaleProcessByApplicationNameAndSpaceMutex.Unlock()
	if fake.ScaleProcessByApplicationNameAndSpaceStub != nil {
		return fake.ScaleProcessByApplicationNameAndSpaceStub(appName, spaceGUID, process)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.scaleProcessByApplicationNameAndSpaceReturns.result1, fake.scaleProcessByApplicationNameAndSpaceReturns.result2
}

func (fake *FakeV3ScaleActor) ScaleProcessByApplicationNameAndSpaceCallCount() int {
	fake.scaleProcessByApplicationNameAndSpaceMutex.RLock()
	defer fake.scaleProcessByApplicationNameAndSpaceMutex.RUnlock()
	return len(fake.scaleProcessByApplicationNameAndSpaceArgsForCall)
}

func (fake *FakeV3ScaleActor) ScaleProcessByApplicationNameAndSpaceArgsForCall(i int) (string, string, ccv3.Process) {
	fake.scaleProcessByApplicationNameAndSpaceMutex.RLock()
	defer fake.scaleProcessByApplicationNameAndSpaceMutex.RUnlock()
	return fake.scaleProcessByApplicationNameAndSpaceArgsForCall[i].appName, fake.scaleProcessByApplicationNameAndSpaceArgsForCall[i].spaceGUID, fake.scaleProcessByApplicationNameAndSpaceArgsForCall[i].process
}

func (fake *FakeV3ScaleActor) ScaleProcessByApplicationNameAndSpaceReturns(result1 v3action.Warnings, result2 error) {
	fake.ScaleProcessByApplicationNameAndSpaceStub = nil
	fake.scaleProcessByApplicationNameAndSpaceReturns = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeV3ScaleActor) ScaleProcessByApplicationNameAndSpaceReturnsOnCall(i int, result1 v3action.Warnings, result2 error) {
	fake.ScaleProcessByApplicationNameAndSpaceStub = nil
	if fake.scaleProcessByApplicationNameAndSpaceReturnsOnCall == nil {
		fake.scaleProcessByApplicationNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v3action.Warnings
			result2 error
		})
	}
	fake.scaleProcessByApplicationNameAndSpaceReturnsOnCall[i] = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeV3ScaleActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getProcessByApplicationNameAndSpaceMutex.RLock()
	defer fake.getProcessByApplicationNameAndSpaceMutex.RUnlock()
	fake.scaleProcessByApplicationNameAndSpaceMutex.RLock()
	defer fake.scaleProcessByApplicationNameAndSpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeV3ScaleActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v3.V3ScaleActor = new(FakeV3ScaleActor)
